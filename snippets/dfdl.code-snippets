{
	// {
	//   DFDL specific snippets
	// }
	"xml:declaration": {
		"scope": "xml",
		"prefix": "declaration",
		"body": ["<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n$0"],
		"description": "XML prefix header",
	},
	"dfdl:header": {
		"scope": "xml",
		"prefix": "schema",
		"body": ["<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n\t\txmlns:dfdl=\"http://www.ogf.org/dfdl/dfdl-1.0/\" \n\t\txmlns:daf=\"urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext\" \n\t\txmlns:fn=\"http://www.w3.org/2005/xpath-functions\" \n\t\txmlns:math=\"http://www.w3.org/2005/xpath-functions/math\" \n\t\telementFormDefault=\"qualified\">\n$0\n</xs:schema>"],
		"description": "dfdl header statement"
	},
	"dfdl:format": {
	  "scope": "xml",
	  "prefix": "format", 
	  "body": ["<dfdl:format alignmentUnits=${1|\"bits\",\"bytes\"|} lengthUnits=${2|\"bits\",\"bytes\",\"characters\"|} representation=${3|\"binary\",\"text\"|} binaryNumberRep=${4|\"binary\",\"packed\",\"bcd\",\"ibm4690Packed\"|} byteOrder=${5|\"bigEndian\",\"littleEndian\"|} bitOrder=${6|\"mostSignificantBitFirst\",\"leastSignificantBitFirst\"|} lengthKind=${7|\"explicit\",\"delimited\",\"implicit\",\"prefixed\",\"pattern\",\"endOfParent\"|} alignment=${8|\"1\",\"implicit\"|} encodingErrorPolicy=${9|\"error\",\"replace\"|} binaryFloatRep=${10|\"ieee\",\"ibm390Hex\"|} calendarPatternKind=${11|\"explicit\",\"implicit\"|} documentFinalTerminatorCanBeMissing=${12|\"yes\",\"no\"|} emptyValueDelimiterPolicy=${13|\"initiator\",\"terminator\",\"both\",\"none\"|} escapeSchemeRef=$14\"\" fillByte=$15\"\" floating=${16|\"no\",\"yes\"|} ignoreCase=${17|\"no\",\"yes\"|} initiatedContent=${18|\"no\",\"yes\"|} initiator=$19\"\" leadingSkip=$20\"\" separator=$21\"\" separatorPolicy=$22\"suppressed\" separatorSupressionPolicy=${23|\"anyEmpty\",\"never\",\"trailingEmpty\",\"trailingEmptyStrict\"|} outputNewLine=${24|\"%CR\",\"LF\",\"%CR,%LF;\"|} textStandardZeroRep=$25\"0\" textStandardInfinityRep=$26\"Inf\" textStandardExponentRep=$27\"E\" textStandardNaNRep=$28\"NaN\" textNumberPattern=$29\"#,##0.###;-#,##0.###\" textNumberRounding=${30|\"explicit\",\"pattern\"|} textNumberRoundingMode=${31|\"roundCeiling\",\"roundFloor\",\"roundDown\",\"roundUp\",\"roundHalfEven\",\"roundHalfDown\",\"roundHalfUp\",\"roundUnnecessary\"|} textNumberRoundingIncrement=$32\"0\" textStandardGroupingSeparator=$33\",\" separatorPosition=${34|\"infix\",\"postFix\",\"prefix\"|} sequenceKind=${35|\"ordered\",\"unordered\"|} terminator=$36\"\" textBidi=$37\"no\" textNumberCheckPolicy=${38|\"lax\",\"strict\"|} textNumberRep=${39|\"standard\",\"zoned\"|} textOutputMinLength=$40\"0\" textPadKind=${41|\"none\",\"padChar\"|} textStandardBase=$42\"10\" textTrimKind=${43|\"none\",\"padChar\"|} trailingSkip=$44\"0\" truncateSpecifiedLengthString=${45|\"no\",\"yes\"|} utf16Width=${46|\"fixed\",\"variable\"|} encoding=${47|\"US-ASCII\",\"ASCII\",\"UTF-8\",\"UTF-16\",\"UTF-16BE\",\"UTF-16LE\",\"ISO-8859-1\"|} nilKind=${48|\"literalCharacter\",\"literalValue\",\"logicalValue\"|} nilValueDelimiterPolicy=${49|\"initiator\",\"terminator\",\"both\",\"none\"|} occursCountKind=${50|\"expression\",\"fixed\",\"implicit\",\"parsed\",\"stopValue\"|} choiceLengthKind=${51|\"explicit\",\"implicit\"|}/>$0"],
	  "description": "dfdl global formatting statement"
	},
	"dfdl:alignmentUnits": {
	  "scope": "xml",
	  "prefix": "dfdl:alignmentUnits",
	  "body": ["dfdl:alignmentUnits=${1|\"bits\",\"bytes\"|}$0"],
	  "description": "alignment value can be units of bits or units of bytes"
	},
	"dfdl:length": {
		"scope": "xml",
		"prefix": "dfdl:length",
		"body": ["dfdl:length=\"$1\"$0"],
	},

	"dfdl:lengthUnits": {
	  "scope": "xml",
	  "prefix": "dfdl:lengthUnits",
	  "body": ["dfdl:lengthUnits=${1|\"bits\",\"bytes\",\"characters\"|}$0"],
	  "description": "lengthUnits value can be specified as bits, bytes, or characters"
	},
	"dfdl:representation": {
	  "scope": "xml",
	  "prefix": "representation",
	  "body": ["dfdl:representation=${1|\"binary\",\"text\"|}$0"],
	  "description": "representation value can be binary or text"
	},
	"dfdl:binaryNumberRep": {
	  "scope": "xml",
	  "prefix": "dfdl:binaryNumberRep",
	  "body": ["dfdl:binaryNumberRep=${1|\"binary\",\"packed\",\"bcd\",\"ibm4690Packed\"|}$0"],
	  "description": "binaryNumberRep value can be binary, packed, bcd, or ibm4690Packed"
	},
	"dfdl:bitOrder": {
	  "scope": "xml",
	  "prefix": "dfdl:bitOrder",
	  "body": ["dfdl:bitOrder=${1|\"mostSignificantBitFirst\",\"leastSignificantFirst\"|}$0"],
	  "description": "bitOrder value can be mostSignificantBitFirst or leastSignificantBitFirst",
	},
	"dfdl:lengthKind": {
	  "scope": "xml",
	  "prefix": "dfdl:lengthKind",
	  "body": ["dfdl:lengthKind=${1|\"explicit\",\"delimited\",\"implicit\",\"prefixed\",\"pattern\",\"endOfParent\"|}$0"],
	  "description": "lengthKind value can be explicit, delimited, implicit, prefixed, pattern, endOfParent",
	},
	"dfdl:alignment": {
	  "scope": "xml",
	  "prefix": "dfdl:alignment",
	  "body": ["dfdl:alignment=${1|\"1\",\"implicit\"|}$0"],
	  "description": "alignment value can have a value of 1 or implicit",
	},
	"dfdl:encodingErrorPolicy": {
	  "scope": "xml",
	  "prefix": "dfdl:encodingErrorPolicy",
	  "body": ["dfdl:encodingErrorPolicy=${1|\"error\",\"replace\"|}$0"],
	  "description": "encodingErrorPolicy value can be error or replace",
	},
	"dfdl:binaryFloatRep": {
	  "scope": "xml",
	  "prefix": "dfdl:binaryFLoatRep",
	  "body": ["dfdl:binaryFloatRep=${1|\"ieee\",\"ibm390Hex\"|}$0"],
      "description": "binaryFloatRep value can be 'ieee' or 'ibm390Hex'",
	},
	"dfdl:calendarPatternKind": {
	  "scope": "xml",
	  "prefix": "dfdl:calendarPatternKind",
	  "body": ["dfdl:calendarPatternKind=${1|\"explicit\",\"implicit\"|}$0"],
	  "description": "calendarPatterKnid value can be explicit or implicit",
	},
    "dfdl:documentTerminatorCanBeMissing": {
	  "scope": "xml",
	  "prefix": "dfdl:documentTerminatorCanBeMissing",
	  "body": ["dfdl:documentFinalTerminatorCanBeMissing=${1|\"yes\",\"no\"|}$0"],
	  "description": "documentFinalTerminatorCanBeMissing value can be yes or no",
	},
	"dfdl:emptyValueDelimiterPolicy": {
	  "scope": "xml",
	  "prefix": "dfdl:emptyValueDelimiterPolicy",
	  "body": ["dfdl:emptyValueDelimiterPolicy=${1|\"initiator\",\"terminator\",\"both\",\"none\"|}$0"],
	  "description": "emptyValueDelimiterPolicy value can be initiator, terminator, both, none",
	},
	"dfdl:escapeSchemeRef": {
	  "scope": "xml",
	  "prefix": "dfdl:escapeSchemeRef",
	  "body": ["dfdl:escapeSchemeRef=\"$1\"$0"],
	  "description": "a named escape scheme definition via its qualified name",
	},
	"dfdl:fillByte": {
	 "scope": "xml",
	 "prefix": "dfdl:fillByte",
	 "body": ["dfdl:fillByte=\"$!\"$0"],
	 "description": "A single byte specified as a DFDL byte value entity or a single character. ",
	},
	"dfdl:": {
	  "scope": "xml",
	  "prefix": "dfdl:floating",
	  "body": ["dfdl:floating=${1|\"no\",\"yes\"|}$0"],
	  "description": "float value can be yes or no",
	},
    "dfdl:ignoreCase": {
	  "scope": "xml",
	  "prefix": "idfdl:gnoreCase",
	  "body": ["dfdl:ignoreCase=${1|\"no\",\"yes\"|}$0"],
	  "description": "ignoreCase value can be no or yes",
	},
	"dfdl:initiatedContent": {
	  "scope": "xml",
	  "prefix": "dfdl:initiatedContent",
	  "body": ["dfdl:initiatedContent=${1|\"no\",\"yes\"|}$0"],
	  "description": "initiatedContent value can be no or yes",
	},
	"dfdl:initiator": {
	  "scope": "xml",
	  "prefix": "dfdl:initiator",
	  "body": ["dfdl:initiator=\"$`\"$0"],
	  "description": "delimitor specifying property",
	},
	"dfdl:leadingSkip": {
	  "scope": "xml",
		"prefix": "dfdl:leadingSkip",
		"body": ["dfdl:leadingSkip=\"$1\"$0"],
		"description": "A non-negative number of bytes or bits to skip before alignment is applied",
	},
	"dfdl:separator": {
		"scope": "xml",
		"prefix": "dfdl:separator",
		"body": ["dfdl:separator=\"$1\"$0"],
		"description": "Specifies a whitespace separated list of alternative DFDL String Literals that are the possible separators for the sequence",
	},
	"dfdl:separatorPolicy": {
		"scope": "xml",
		"prefix": "dfdl:separatorPolicy",
		"body": ["dfdl:separatorPolicy=${1|\"required\",\"suppressed\",\"suppressedAtEnd\"|}$0"],
		"description": "SeparatorPolicy value can be required, suppressed or suppressedAtEnd",
	},
	"dfdl:separatorSuppressionPolicy": {
		"scope": "xml",
		"prefix": "dfdl:separatorSuppressionPolicy",
		"body": ["dfdl:separatorSupressionPolicy=${1|\"anyEmpty\",\"never\",\"trailingEmpty\",\"trailingEmptyStrict\"|}"],
		"description": "separatorSupressionPolicy value can be anyEmpty, never, trailingEmpty or trailingEmptyStrict",
	},
	"dfdl:outputNewLine": {
		"scope": "xml",
		"prefix": "dfdl:outputNewLine",
		"body": ["dfdl:outputNewLine=${1|\"%CR\",\"%LF\",\"%CR,%LF\"|}$0"],
		"description": "outputNewLine value can be %CR, %LF or both(%CR,%LF)",
	},
  "dfdl:textStandardZeroRep": {
		"scope": "xml",
		"prefix": "dfdl:textStandardZeroRep",
		"body": ["dfdl:textStandardZeroRep=\"0$1\"$0"],
		"description": "testStandardZeroRep values can be an empty string or any character string",
	},
	"dfdl:textStandardInfinityRep": {
		"scope": "xml",
		"prefix": "dfdl:textStandardInfinityRep",
		"body": ["dfdl:textStandardInfinityRep=\"Inf$1\"$0"],
		"description": "The value used to represent infinity",
	},
	"dfdl:textStandardNaNRep": {
		"scope": "xml",
		"prefix": "dfdl:textStandardNaNRep",
		"body": ["dfdl:textStandardNaNRep=\"NaN$1\"$0"],
		"description": "The value used to represent NaN",
	},
	"dfdl:textStandardExponentRep": {
		"scope": "xml",
		"prefix": "dfdl:textStandardExponentRep",
		"body": ["dfdl:textStandardExponentRep=\"E$1\"$0"],
		"description": "Defines the actual character(s) that appear in the data as the exponent indicator",
	},
	"dfdl:textStandardGroupingSeparator": {
		"scope": "xml",
		"prefix": "dfdl:textStandardGroupingSeparator",
		"body": ["dfdl:textStandardGroupingSeparator=\",$1\"$0"],
		"description": "This property defines the single character that can appear in the data as the grouping separator",
	},
	"dfdl:textNumberPattern": {
		"scope": "xml",
		"prefix": "dfdl:textNumberPattern",
		"body": ["dfdl:textNumberPattern=\"#,##0.###;-#,##0.###$1\"$0"],
		"description": "Defines the ICU-like pattern that describes the format of the text number",
	},
	"dfdl:textNumberRounding": {
		"scope": "xml",
		"prefix": "dfdl:textNumberRounding",
		"body": ["dfdl:textNumberRounding=${1|\"explicit\",\"pattern\"|}$0"],
		"description": "textNumberRounding value can be explicit or pattern",
	},
	"dfdl:textNumberRoundingMode": {
		"scope": "xml",
		"prefix": "dfdl:textNumberRoundingMode",
		"body": ["dfdl:textNumberRoundingMode=${1|\"roundCeiling\",\"roundFloor\",\"roundDown\",\"roundUp\",\"roundHalfEven\",\"roundHalfDown\",\"roundHalfUp\",\"roundUnnecessary\"|} $0"],
		"description": "textNumberRoundingMode value can be rondCeiling, roundFloor, roundDown, roundUp, roundHalfEven, roundHalfDown, roundHalfUp, or roundUnneccessary",
	},
	"dfdl:textNumberRoundingIncrement": {
		"scope": "xml",
		"prefix": "dfdl:textNumberRoundingIncrement",
		"body": ["dfdl:textNumberRoundingIncrement=\"0$1\"$0"],
		"description": "Specifies the rounding increment to use during unparsing",
	},
	"dfdl:separatorPosition": {
		"scope": "xml",
		"prefix": "dfdl:separatorPosition",
		"body": ["dfdl:separatorPosition=${1|\"infix\",\"postFix\",\"prefix\"|}$0"],
		"description": "separatorPosition can be infix, postfix or prefix",
	},
	"dfdl:sequenceKind": {
		"scope": "xml",
		"prefix": "dfdl:sequenceKind",
		"body": ["dfdl:sequenceKind=${1|\"ordered\",\"unordered\"|}$0"],
		"description": "sequenceKind values can be ordered or unordered",
	},
	"dfdl:terminator": {
		"scope": "xml",
		"prefix": "dfdl:terminator",
		"body": ["dfdl:terminator=\"$1\"$0"],
		"description": "expresses characters or bytes to be found in the data stream to mark the termination of an element",
	},
	"dfdl:textBidi": {
		"scope": "xml",
		"prefix": "dfdl:textBidi",
		"body": ["dfdl:textBidi=\"no$1\"$0"],
		"description": "Future property that will allow bi-direction text processing. Current valid value is no",
	},
	"dfdl:textNumberCheckPolicy": {
		"scope": "xml",
		"prefix": "dfdl:textNumberCheckPolicy",
		"body": ["dfdl:textNumberCheckPolicy=${1|\"lax\",\"strict\"|}$0"],
		"description": "textNumberCheckPolicy value can be lax or strict",
	},
	"dfdl:textNumberRep": {
		"scope": "xml",
		"prefix": "dfdl:textNumberRep",
		"body": ["dfdl:textNumberRep=${1|\"standard\",\"zoned\"|}$0"],
		"description": "textNumberRep value can be standard or zoned",
	},
	"dfdl:textOutputMinLength": {
		"scope": "xml",
		"prefix": "dfdl:textOuptputMinLength",
		"body": ["dfdl:textOutputMinLength=\"0$1\"$0"],
		"description": "Specifies the minimum content length during unparsing for simple types that do not allow the XSD minLength facet to be specified",
	},
	"dfdl:textPadKind": {
		"scope": "xml",
		"prefix": "dfdl:textPadKind",
		"body": ["dfdl:textPadKind=${1|\"none\",\"padChar\"|}$0"],
		"description": "textPadKind value can be none or padChar",
	},
	"dfdl:textStandardBase": {
		"scope": "xml",
		"prefix": "dfdl:textStandardBase",
		"body": ["dfdl:textStandardBase=\"10$1\"$0"],
		"description": "Indicates the number base valid values are 2, 8, 10, or 16",
	},
	"dfdl:textTrimKind": {
		"scope": "xml",
		"prefix": "dfdl:textTrimKind",
		"body": ["dfdl:textTrimKind=${1|\"none\",\"padChar\"|}$0"],
		"description": "textTrimKind value can be none or padChar",
	},
	"dfdl:trailingSkip": {
		"scope": "xml",
		"prefix": "dfdl:trailingSkip",
		"body": ["dfdl:trailingSkip=\"0$1\"$0"],
		"description": "A non-negative number of bytes or bits to skip after the element",
	},
	"dfdl:truncateSpecifiedLengthString": {
		"scope": "xml",
		"prefix": "dfdl:truncateSpecifiedLengthString",
		"body": ["dfdl:truncateSpecifiedLengthString=${1|\"no\",\"yes\"|}$0"],
		"description": "truncateSpecifiedLengthString value can be yes or no",
	},
	"dfdl:utf16Width": {
		"scope": "xml",
		"prefix": "dfdl:utf16Width",
		"body": ["dfdl:utf16Width=${1|\"fixed\",\"variable\"|}$0"],
		"description": "utf16width value can be fixrd or variable",
	},
	"dfdl:encoding": {
		"scope": "xml",
		"prefix": "dfdl:encoding",
		"body": ["dfdl:encoding=${1|\"US-ASCII\",\"ASCII\",\"UTF-8\",\"UTF-16\",\"UTF-16BE\",\"UTF-16LE\",\"ISO-8859-1\"|}$0"],
		"description": "encoding value can be Us-ASCII, ASCII, UTF-8, UTF-16, UTF-16BE, UTF-16LE, ISO-8859-1",
	},
	"dfdl:nilKind": {
		"scope": "xml",
		"prefix": "dfdl:nilKind",
		"body": ["dfdl:nilKind=${1|\"literalCharacter\",\"literalValue\",\"logicalValue\"|}$0"],
		"description": "nilKind value can be literalCharacter, literalValue or logicalValue",
	},
	"dfdl:nilValueDelimiterPolicy": {
		"scope": "xml",
		"prefix": "dfdl:nilValueDelimiterPolicy",
		"body": ["dfdl:nilValueDelimiterPolicy=${1|\"initiator\",\"terminator\",\"both\",\"none\"|}$0"],
		"description": "nilValueDelimiterPolicy value can be initiator, terminator, both, or none",
	},
	"dfdl:occursCountKind": {
		"scope": "xml",
		"prefix": "dfdl:occursCountKind",
		"body": ["dfdl:occursCountKind=${1|\"expression\",\"fixed\",\"implicit\",\"parsed\",\"stopValue\"|} $0"],
		"description": "occursCountKind value can be expression, fixed, implicit, parsed, stopValue",
	},
	"dfdl:choiceLengthKind": {
		"scope": "xml",
		"prefix": "dfdl:choiceLengthKind",
		"body": ["dfdl:choiceLengthKind=${1|\"explicit\",\"implicit\"|} $0"],
		"description": "choiceLengthKind value can be explicit or implicit",
	},
	"xs:element": {
		"scope": "xml",
		"prefix": "element",
		"body": ["<xs:element name=\"$1\">\n\t$0\n</xs:element>"],
		"description": "dfdl element block",
	},
	"xs:complexType": {
		"scope": "xml",
		"prefix": "complex",
		"body": ["<xs:complexType>\n\t$0\n</xs:complexType>"],
		"description": "dfdl complexType block"
	},
	"xs:complexType2": {
		"scope": "xml",
		"prefix": "complex2",
		"body": ["<xs:complexType name=\"$1\"/>\n$0"],
		"description": "dfdl complexType block with name attribute"
	},
	"xs:sequence": {
		"scope": "xml",
		"prefix": "sequence",
		"body": ["<xs:sequence>\n\t$0\n</xs:sequence>"],
		"description": "sequence block"
	},
	"xs:sequence2": {
		"scope": "xml",
		"prefix": "sequence/",
		"body": ["<xs:sequence />\n$0"],
		"description": "dfdl terminated sequence block",
	},
	"xs:sequencehiddengroup": {
		"scope": "xml",
		"prefix": "dfdl:hiddenGroupRef",
		"body": ["<xs:sequence dfdl:hiddenGroupRef=\"$0\"/>"],
		"description": "dfdl sequence block with hidden group"
	},
	"xs:group":{
		"scope": "xml",
		"prefix": "group",
		"body": ["<xs:group name=\"$1\"\n\t$0>\n</xs:group>"],
	},
	"xs:element2": {
		"scope": "xml",
		"prefix": "element/",
		"body": ["<xs:element name=\"$1\" $0/>"],
		"description": "element block termnated",
	},
	"xs:choice": {
		"scope": "xml",
		"prefix": "choice",
		"body": ["<xs:choice>\n\t$0\n</xs:choice>"],
	},
	"xs:elementRef": {
		"scope": "xml",
		"prefix": "ref",
		"body": ["<xs:element ref=\"$1\" $0/>"],
		"description": "element reference block",
	},
	"xs:annotation": {
		"scope": "xml",
		"prefix": "annotation",
		"body": ["<xs:annotation>\n\t$0\n</xs:annotation>"],
		"description": "annotation block"
	},
	"xs:appinfo": {
		"scope": "xml",
		"prefix": "appinfo",
		"body": ["<xs:appinfo source=\"http://www.ogf.org/dfdl/\">\n\t$0\n</xs:appinfo>"],
		"description": "appinfo block"
	},
	"dfdl:discriminator": {
		"scope": "xml",
		"prefix": "discriminator",
		"body": ["<dfdl:discriminator test=\"{$1}\"/>\n$0"],
		"description": "dfdl:discriminator is used during parsing to: 1.resolve points of uncertainty 2.remove ambiguity during speculative parsing 3.improve diagnostic behavior when a DFDL parser encounters malformed data. A DFDL discriminator may contain a test expression that evaluates to true or false.",
	},
	"dfdl:assert": {
		"scope": "xml",
		"prefix": "dfdl:assert",
		"body": ["<dfdl:assert><$1></dfdl:assert>\n$0"],
		"description": "dfdl assert block",
	},
	"dfdl:inputValueCalc": {
		"scope": "xml",
		"prefix": "dfdl:inputValueCalc",
		"body": ["dfdl:inputValueCalc='{$1}'$0"],
		"description": "An expression that calculates the value of the element when parsing.",
	},
	"dfdl:outputValueCalc": {
		"scope": "xml",
		"prefix": "outputValueCalc",
		"body": ["dfdl:outputValueCalc='{$1}'$0"],
		"description": "An expression that calculates the value of the current element when parsing.",
	},
	"simpletype": {
		"scope": "xml",
		"prefix": "simpleType/",
		"body": "<xs:simpleType name=\"$1\" $0 />",
		"description": "Named simpleType blobk terminated",
	},
	"xs:simpleType": {
		"scope": "xml",
		"prefix": "simpleType",
		"body": ["<xs:simpleType name=\"$1\">\n\t$0\n</xs:simpleType>"],
		"description": "Named simpleType block"
	},
	"xs:type": {
		"scope": "xml",
		"prefix": "type",
		"body": ["type=\"$1\"$0"],
		"description": "type attribute"
	},
	"xs:restriction": {
		"scope": "xml",
		"prefix": "restriction",
		"body": ["<xs:restriction base=\"$1\">\n\t$0\n</xs:restriction>"],
		"description": "restriction block",
	},
	"xs:restriction/": {
		"scope": "xml",
		"prefix": "restriction/",
		"body": ["<xs:restriction base=\"$1\" />"],
		"description": "restriction block terminated",
	},
	"fn:error": {
		"scope": "xml",
		"prefix": "fn:error",
		"body": "fn:error(\"$1\",\"$2\",\"$0\")",
		"description": "dfdl error function takes 3 values",
	}
}